version: '3.7'
services:
  notification-eureka-server:
    container_name: notification-eureka-server
    build:
      context: ./notification-eureka-server
      dockerfile: Dockerfile
    networks:
      - notification-microservices
    ports:
      - "8761:8761"

  email-filtering-service:
    container_name: email-filtering-service
    build:
      context: ./email-filtering-service
      dockerfile: Dockerfile
    networks:
      - notification-microservices
    env_file:
      - ./email-filtering-service/.env
    environment:
      - eureka.client.service-url.defaultZone=http://notification-eureka-server:8761/eureka/
      - spring.profiles.active=docker
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"
    ports:
      - "8082:8082"
    depends_on:
      - notification-eureka-server
      - db-email-filtering-service
    links:
      - db-email-filtering-service

  email-rest-client:
    container_name: email-rest-client
    build:
      context: ./email-rest-client
      dockerfile: Dockerfile
    networks:
      - notification-microservices
    env_file:
      - ./email-rest-client/.env
    environment:
      - eureka.client.service-url.defaultZone=http://notification-eureka-server:8761/eureka/
      - spring.profiles.active=docker
      - httpClients.message-service=http://message-service:8083/msg/api
      - httpClients.email-filtering-service=http://email-filtering-service:8082/filtering/api
      - spring.kafka.bootstrap-servers=kafka:9092
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"
    ports:
      - "8081:8081"
    depends_on:
      - notification-eureka-server
      - db-email-rest-client
      - email-filtering-service
      - message-service
      - kafka
      - zookeeper
    links:
      - db-email-rest-client

  message-service:
    container_name: message-service
    build:
      context: ./message-service
      dockerfile: Dockerfile
    networks:
      - notification-microservices
    env_file:
      - ./message-service/.env
    environment:
      - eureka.client.service-url.defaultZone=http://notification-eureka-server:8761/eureka/
      - httpClients.message-service=http://message-service:8083/msg/api
      - spring.profiles.active=docker
      - spring.kafka.bootstrap-servers=kafka:9092
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"
    ports:
      - "8083:8083"
    depends_on:
      - db-message-service
      - email-filtering-service
      - notification-eureka-server
    links:
      - db-message-service

  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    networks:
      - notification-microservices
    environment:
      - eureka.client.service-url.defaultZone=http://notification-eureka-server:8761/eureka/
      - spring.profiles.active=docker
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"
    ports:
      - "8084:8084"
    depends_on:
      - message-service
      - notification-eureka-server

  notification-gateway:
    container_name: notification-gateway
    build:
      context: ./notification-gateway
      dockerfile: Dockerfile
    networks:
      - notification-microservices
    links:
      - notification-eureka-server
      - email-filtering-service
      - email-rest-client
      - message-service
    environment:
      - eureka.client.service-url.defaultZone=http://notification-eureka-server:8761/eureka/
    ports:
      - "8080:8080"
    depends_on:
      - notification-eureka-server
      - email-filtering-service
      - message-service
      - email-rest-client

  db-email-filtering-service:
    container_name: db-email-filtering-service
    image: postgres:14.0
    restart: always
    env_file:
      - ./email-filtering-service/.postgresql-env
    networks:
      - notification-microservices
    ports:
      - "5433:5432"
    volumes:
      - ./postgres-email-filtering-service:/var/lib/postgresql/data
      - ./email-filtering-service/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  notification-microservices-client:
    container_name: notification-microservices-client
    build:
      context: ./notification-microservices-client
      dockerfile: Dockerfile
    networks:
      - notification-microservices
    ports:
      - "3000:80"
    depends_on:
      - message-service
      - notification-eureka-server
      - email-filtering-service
      - email-rest-client
      - notification-gateway

  db-email-rest-client:
    container_name: db-email-rest-client
    image: postgres:14.0
    restart: always
    env_file:
      - ./email-rest-client/.postgresql-env
    networks:
      - notification-microservices
    ports:
      - "5434:5432"
    volumes:
      - ./postgres-email-rest-client:/var/lib/postgresql/data
      - ./email-rest-client/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  db-message-service:
    container_name: db-message-service
    image: postgres:14.0
    restart: always
    env_file:
      - ./message-service/.postgresql-env
    networks:
      - notification-microservices
    ports:
      - "5435:5432"
    volumes:
      - ./postgres-message-service:/var/lib/postgresql/data
      - ./message-service/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - notification-microservices

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    hostname: kafka
    networks:
      - notification-microservices
    links:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CREATE_TOPICS="message-service-topic:1:1"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - notification-microservices
    volumes:
      - ./elasticsearch/data:/var/lib/elasticsearch/data:rw

  logstash:
    image: docker.elastic.co/logstash/logstash:7.2.0
    container_name: logstash
    ports:
      - "25826:25826"
      - "5044:5044"
    networks:
      - notification-microservices
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    restart: on-failure
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.2.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - notification-microservices
    ports:
      - "5601:5601"
    restart: on-failure
    depends_on:
      - elasticsearch

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.2.0
    container_name: filebeat
    environment:
      - strict.perms=false
    networks:
      - notification-microservices
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./filebeat:/usr/share/filebeat/data:rw
    user: root
    restart: on-failure
    depends_on:
      - logstash

networks:
  notification-microservices:
    driver: bridge